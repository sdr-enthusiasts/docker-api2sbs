#!/command/with-contenv bash
#shellcheck shell=bash disable=SC1091,SC2154
set -o pipefail
source /scripts/common
source /scripts/json_keys

SBS_SERVER="${SBS_SERVER:-ultrafeeder}"
SBS_PORT="${SBS_PORT:-32006}"
STATS_INTERVAL="${STATS_INTERVAL:-300}"
JSON_AIRCRAFT_KEY="${JSON_AIRCRAFT_KEY:-ac}"

# shellcheck disable=SC2016
if [[ -z "$API_URL" ]]; then API_URL='https://api.airplanes.live/v2/point/{LAT}/{LON}/{DIST}'; fi

if [[ -z "${LOCATIONS}" ]]; then
  "${s6wrap[@]}" echo "[FATAL] LOCATIONS is not set. Container halted"
  exec sleep infinity
fi

#check if API can be reached and (if config'd) authentication is correctly set
TEST_URL="${API_URL//\{LAT\}/90}"; TEST_URL="${TEST_URL//\{LON\}/0}"; TEST_URL="${TEST_URL//\{DIST\}/0}"
backoff=1
if [[ -n "$API_AUTH" ]]; then
  while ! msg="$(curl -sSL --fail-with-body -H "api-auth: $API_AUTH" "$TEST_URL")" \
      || [[ "$msg" = '{"NO_AUTH"}' ]] \
      || [[ "$(jq -r '.'"${json_keys[aircraft]}"'[0].'"${json_keys[registration]}"'' <<< "$msg")" != "null" ]]; do
    "${s6wrap[@]}" echo "[WARNING] Cannot verify API_URL or API_AUTH. Trying again in $backoff seconds. To debug, run the following command from the Linux command line:"
    "${s6wrap[@]}" echo "        curl -sSL -H \"api-auth: $API_AUTH\" \"$TEST_URL\""
    "${s6wrap[@]}" echo "        Server response was: $msg"
    sleep $backoff
    backoff=$(( backoff * 2 )); if (( backoff > 60 )); then backoff=60; fi
  done
  "${s6wrap[@]}" echo "[INFO] API availability and API_AUTH confirmed for $API_URL"
  AUTH_HEADER="-H 'api-auth: $API_AUTH'"
else
  while ! msg="$(curl -sSL --fail-with-body "$TEST_URL" 2>&1)"; do
    "${s6wrap[@]}" echo "[WARNING] Cannot verify API_URL. Trying again in $backoff seconds. To debug, run the following command from the Linux command line:"
    "${s6wrap[@]}" echo "        curl -sSL -H \"$TEST_URL\""
    "${s6wrap[@]}" echo "        Server response was: $msg"
    sleep $backoff
    backoff=$(( backoff * 2 )); if (( backoff > 60 )); then backoff=60; fi
  done
  "${s6wrap[@]}" echo "[INFO] API availability confirmed for $API_URL"
fi

readarray -d ";" -t loc <<< "${LOCATIONS// /}"

LOOPTIME="${LOOPTIME:-$(( ${#loc[@]} * 3 ))}"
if (( LOOPTIME < 15 )); then LOOPTIME=15; fi

if [[ "${API_URL: -1}" == "/" ]]; then API_URL="${API_URL:0:-1}"; fi
if [[ "${API_URL:0:4}" != "http" ]]; then API_URL="https://${API_URL}"; fi

WAITTIME="$(( LOOPTIME / ${#loc[@]} ))"

# Open a FD so we can write to the port
backoff=1
while ! exec 3>/dev/tcp/"$SBS_SERVER"/"$SBS_PORT"; do
  exec 3>&- || true
  "${s6wrap[@]}" echo "[WARNING] Could not open a connection to the SBS server at $SBS_SERVER:$SBS_PORT. Trying again in $backoff seconds."
  sleep $backoff
  backoff=$(( backoff * 2 ))
  if (( backoff > 60 )); then
    backoff=60
  fi
done
"${s6wrap[@]}" echo "[INFO] Successfully opened a connection to $SBS_SERVER:$SBS_PORT"

# Wait a bit before starting the data retrieval - this is needed to avoid running into the rate limits
# after pinging the server to see that authentication works - (thanks to @dziban303 for the suggestion)

sleep 2

for l in "${loc[@]}"; do
  l="${l//[^0-9A-Za-z,/-.]/}"; l="${l//$'\n'/}"
  if [[ -n "${l}" ]]; then
    { "${s6wrap[@]}" echo "[INFO] Starting data retrieval for Lat,Lon,Dist=\"$l\""
      # get lat/lon/dist from the location string
      lat="${l%%,*}"; lx="${l#*,}"
      lon="${lx%%,*}"; lx="${lx#*,}"
      dist="${lx%%,*}"; unset lx

      # create logfile if stats are enabled
      if ! chk_disabled "$STATS_INTERVAL"; then touch "/tmp/sbs_msgs_cache.${l}"; fi

      # construct the API URL
      API_URL="${API_URL//\{LAT\}/$lat}"; API_URL="${API_URL//\{LON\}/$lon}"; API_URL="${API_URL//\{DIST\}/$dist}"

      while true; do
        # get the data from the API and parse it into a SBS message using JQ
        if msg="$(xargs curl <<< "-sSL --fail ${AUTH_HEADER} ${API_URL}")" && \
            msg="$(jq -r --arg aircraft "${json_keys[aircraft]}" \
                    --arg hex      "${json_keys[hex]}" \
                    --arg flight   "${json_keys[flight]}" \
                    --arg alt      "${json_keys[alt]}" \
                    --arg speed    "${json_keys[speed]}" \
                    --arg track    "${json_keys[track]}" \
                    --arg lat      "${json_keys[lat]}" \
                    --arg lon      "${json_keys[lon]}" \
                    --arg squawk   "${json_keys[squawk]}" \
                    --arg date     "$(date +%Y-%m-%d,%H:%M:%S)" \
                    'try .[$aircraft][] | select( . != null ) 
                      | "MSG,3,1,1,\(.[$hex] | ascii_upcase),1,\($date),\($date),\(.[$flight]),\(.[$alt]),\(.[$speed]),\(.[$track]),\(.[$lat]),\(.[$lon]),,\(.[$squawk]),,,,\(if (.[$alt] | tostring) == "ground" then "-1" else "0" end)"' <<< "$msg" 2>&1 | \
            sed 's/null//;s/ground/0/')"; then
          # if there's at least one message, send it to the SBS server
          if [[ -n "$msg" ]]; then
            echo "$msg" >&3
            if ! chk_disabled "$STATS_INTERVAL"; then echo "$msg" >> "/tmp/sbs_msgs_cache.${l}"; fi
          fi
        else
          "${s6wrap[@]}" echo "[ERROR] Could not retrieve data for Lat,Lon,Dist=\"${l}\". MSG: $msg"
          break
        fi
        sleep "$LOOPTIME"
      done
    } &
    sleep "$WAITTIME"
  fi
done

"${s6wrap[@]}" echo "[INFO] Data Retrieval started for all locations"

# if one of the child processes fails, start over again.
wait -n || true
pkill -P $$ || true

# be nice and close the FD
exec 3>&-

"${s6wrap[@]}" echo "[ERROR] Data Retrieval failed. Restarting..."

# again - sleep a bit to avoid hitting the rate limits upon next start of the script
sleep 2
